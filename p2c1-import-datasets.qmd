# Part II: Data Acquisition

As you might imagine, you must acquire your data before conducting an analysis. This may be done through the methods such as manual creation of datasets, importing pre-constructed data, or leveraging APIs.

- **Included Datasets**- R comes with a variety of datasets already built in. This chapter will teach you how to view the catalog of included datasets, preview individual datasets, and begin working with the data.
- **Import from Spreadsheets**- Most R users will have to work with spreadsheets at some point in their careers. This chapter will teach you how to import data from spreadsheets whether it's in a .csv or .xlsx file and get the imported data into a format that's easy to work with.
- **Working with APIs**- API stands for Application Programming Interface. These sorts of tools are commonly used to programmatically pull data from a third party resource. This chapter demonstrates how you can begin to leverage these tools in your own workflows.

# Included Datasets

R comes with a variety of datasets already built in. This chapter will teach you how to view the catalog of included datasets, preview individual datasets, and begin working with the data.

## View Catalog

You can view a complete list of datsets available along with a brief description for each one by typing "data()" into your console.

```{r}
#| eval: false
data()
```

This will open a new tab in your R Studio instance that looks similar to the following image:

```{r out.extra="style='background-color: #9ecff7; padding:10px; display: block; margin-left: auto; margin-right: auto; width: 90%;'"}
#| label: data
#| echo: false
#| out.width: 500
knitr::include_graphics("images/data-acquisition/data.png", dpi = 270)
```

## Working with Included Data

The first step to begin working with your chosen dataset is to load it into your environment by using the "data" function with the quoted name of your dataset inside the parentheses. In the following example, we'll attach the "iris" dataset to our environment.

::: callout-note
It may not be necessary for you to load your dataset via the "data" function prior to using it. Additionally, some datasets may require you to add them to your search path by using using the "attach" function (conversely, you can remove datasets from your search path by using the "detach" function).
:::

```{r}
#| eval: false
data("iris")
```

This action will then give us a variable with the same name as our dataset which we can call as we would with any other data structure. Let's preview the "iris" dataset by using the "head" function.

```{r}
#| eval: false
head(iris)
```

```{r}
#| echo: false
knitr::kable(head(iris), format="markdown")
```

Finally, you can view more information about any given dataset by typing the dataset name into the "Help" tab in the "Files" pane.

```{r out.extra="style='background-color: #9ecff7; padding:10px; display: block; margin-left: auto; margin-right: auto; width: 90%;'"}
#| label: data-acq-1
#| echo: false
#| out.width: 500
knitr::include_graphics("images/data-acquisition/data-acq-1.png", dpi = 270)
```

## Common Datasets

Here are a few other commonly used datasets in the R community. These datasets are commonly used to practice and to teach.

### mtcars

```{r}
#| eval: false
head(mtcars)
```

```{r}
#| echo: false
knitr::kable(head(mtcars), format="markdown")
```

### faithful

```{r}
#| eval: false
head(faithful)
```

```{r}
#| echo: false
knitr::kable(head(faithful), format="markdown")
```

### ChickWeight

```{r}
#| eval: false
head(ChickWeight)
```

```{r}
#| echo: false
knitr::kable(head(ChickWeight), format="markdown")
```

### Titanic

```{r}
head(Titanic)
```

## Resources

- List of datasets available in Base R: <https://www.rdocumentation.org/packages/datasets/versions/3.6.2>

# Import from Spreadsheets

Most R users will have to work with spreadsheets at some point in their careers. This chapter will teach you how to import data from spreadsheets whether it's in a .csv or .xlsx file and get the imported data into a format that's easy to work with. Additionally, this chapter will demonstrate how to import multiple files at once and combine them all into a single dataframe.

## Import from .csv Files

R has a function called "read.csv" which allows you to read a csv file directly to a dataframe. The following code snippet is a simple example of how to execute this function.

::: callout-note
It's worth noting that it isn't necessary to store the file path as a variable before calling the function; however, this habit may save you time down the road.
:::

```{r}
#| eval: false
input <- "C:/File Location/example.csv"
df <- read.csv(input)
```

Alternatively, if you have multiple files from the same directory that need to be imported, you could do something more like the following code snippet. 

```{r}
#| eval: false
directory <- "C:/File Location/"
first_file <- paste(directory, "first_file.csv", sep="")
second_file <- paste(directory, "second_file.csv", sep="")
first_df <- read.csv(first_file)
second_df <- read.csv(second_file)
```

## Import from .xlsx Files

Excel files are handled very similarly to CSV files with the exception being that you will need to use the "read_excel" function from the "readxl" library. The following code snippet demonstrates how to import an Excel file into R.

```{r}
#| eval: false
library(readxl)
input <- "C:/File Location/example.xlsx"
df <- read_excel(input)
```

## Import and Combine Multiple Files

You may come across a situation where you have multiple CSV files in a folder which you need combined into a single data frame. The following function from a package I personally created will do just that.

This package exists only on github (rather than being distributed through CRAN) so you'll have to perform an extra step to load the library.

```{r}
#| eval: false
install.packages("remotes")
remotes::install_github("TrevorFrench/trevoR")
```

Now that you have the package loaded, you can specify the folder that contains your files and use the "combineFiles" function.

```{r}
#| eval: false
wd <- "C:/YOURWORKINGDIRECTORY"
combineFiles(wd)
```

To take this one step further, you can immediately assign the output of the function to a variable name as follows.

```{r}
#| eval: false
df <- combineFiles(wd)
```

You now have a dataframe titled "df" which contains all of the data from your .csv files combined!

::: callout-note
All of the headers must match in your CSV files must match exactly for this function to work as expected.
:::

## Resources

- trevoR package documentation: <https://github.com/TrevorFrench/trevoR>
